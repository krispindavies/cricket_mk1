// Copyright (c) 2024 Krispin Davies
// SPDX-License-Identifier: BSD-3-Clause

#include "PhysCrick.h"
#include "Simulation_Controls.h"

void kSim::Sim_Crick_Struct::calcAccelQuat()
{
  double VL[763];

  VL[0] = MODEL_Gravity;

  VL[1] = 0.250;   // MODEL_RFT_Origin_X;
  VL[2] = -0.150;  // MODEL_RFT_Origin_Y;
  VL[3] = 0.0;     // MODEL_RFT_Origin_Z;
  VL[4] = MODEL_RFT_COG_X;
  VL[5] = -MODEL_RFT_COG_Y;
  VL[6] = 0.0;  // MODEL_RFT_COG_Z;
  VL[7] = MODEL_RFT_MASS;
  VL[8] = MODEL_RFT_I_XX;
  VL[9] = MODEL_RFT_I_YY;
  VL[10] = MODEL_RFT_I_ZZ;

  VL[11] = sin(m_RFT.m_Joint_Angle);
  VL[12] = cos(m_RFT.m_Joint_Angle);
  VL[13] = m_RFT.m_Joint_Vel;
  VL[14] = m_RFT.m_Joint_Torque;
  VL[15] = m_RFT.m_ExtF_X;
  VL[16] = m_RFT.m_ExtF_Y;
  VL[17] = m_RFT.m_ExtF_Z;
  VL[18] = m_RFT.m_ExtM_X;
  VL[19] = m_RFT.m_ExtM_Y;
  VL[20] = m_RFT.m_ExtM_Z;

  VL[21] = 0.250;  // MODEL_LFT_Origin_X;
  VL[22] = 0.150;  // MODEL_LFT_Origin_Y;
  VL[23] = 0.0;    // MODEL_LFT_Origin_Z;
  VL[24] = MODEL_LFT_COG_X;
  VL[25] = MODEL_LFT_COG_Y;
  VL[26] = 0.0;  // MODEL_LFT_COG_Z;
  VL[27] = MODEL_LFT_MASS;
  VL[28] = MODEL_LFT_I_XX;
  VL[29] = MODEL_LFT_I_YY;
  VL[30] = MODEL_LFT_I_ZZ;

  VL[31] = sin(m_LFT.m_Joint_Angle);
  VL[32] = cos(m_LFT.m_Joint_Angle);
  VL[33] = m_LFT.m_Joint_Vel;
  VL[34] = m_LFT.m_Joint_Torque;
  VL[35] = m_LFT.m_ExtF_X;
  VL[36] = m_LFT.m_ExtF_Y;
  VL[37] = m_LFT.m_ExtF_Z;
  VL[38] = m_LFT.m_ExtM_X;
  VL[39] = m_LFT.m_ExtM_Y;
  VL[40] = m_LFT.m_ExtM_Z;

  VL[41] = -0.250;  // MODEL_RRT_Origin_X;
  VL[42] = -0.150;  // MODEL_RRT_Origin_Y;
  VL[43] = 0.0;     // MODEL_RRT_Origin_Z;
  VL[44] = MODEL_RRT_COG_X;
  VL[45] = -MODEL_RRT_COG_Y;
  VL[46] = 0.0;  // MODEL_RRT_COG_Z;
  VL[47] = MODEL_RRT_MASS;
  VL[48] = MODEL_RRT_I_XX;
  VL[49] = MODEL_RRT_I_YY;
  VL[50] = MODEL_RRT_I_ZZ;

  VL[51] = sin(m_RRT.m_Joint_Angle);
  VL[52] = cos(m_RRT.m_Joint_Angle);
  VL[53] = m_RRT.m_Joint_Vel;
  VL[54] = m_RRT.m_Joint_Torque;
  VL[55] = m_RRT.m_ExtF_X;
  VL[56] = m_RRT.m_ExtF_Y;
  VL[57] = m_RRT.m_ExtF_Z;
  VL[58] = m_RRT.m_ExtM_X;
  VL[59] = m_RRT.m_ExtM_Y;
  VL[60] = m_RRT.m_ExtM_Z;

  VL[61] = -0.250;  // MODEL_LRT_Origin_X;
  VL[62] = 0.150;   // MODEL_LRT_Origin_Y;
  VL[63] = 0.0;     // MODEL_LRT_Origin_Z;
  VL[64] = MODEL_LRT_COG_X;
  VL[65] = MODEL_LRT_COG_Y;
  VL[66] = 0.0;  // MODEL_LRT_COG_Z;
  VL[67] = MODEL_LRT_MASS;
  VL[68] = MODEL_LRT_I_XX;
  VL[69] = MODEL_LRT_I_YY;
  VL[70] = MODEL_LRT_I_ZZ;

  VL[71] = sin(m_LRT.m_Joint_Angle);
  VL[72] = cos(m_LRT.m_Joint_Angle);
  VL[73] = m_LRT.m_Joint_Vel;
  VL[74] = m_LRT.m_Joint_Torque;
  VL[75] = m_LRT.m_ExtF_X;
  VL[76] = m_LRT.m_ExtF_Y;
  VL[77] = m_LRT.m_ExtF_Z;
  VL[78] = m_LRT.m_ExtM_X;
  VL[79] = m_LRT.m_ExtM_Y;
  VL[80] = m_LRT.m_ExtM_Z;

  VL[81] = MODEL_BDY_Origin_X;
  VL[82] = MODEL_BDY_Origin_Y;
  VL[83] = MODEL_BDY_Origin_Z;
  VL[84] = MODEL_BDY_COG_X;
  VL[85] = MODEL_BDY_COG_Y;
  VL[86] = MODEL_BDY_COG_Z;
  VL[87] = MODEL_BDY_MASS;
  VL[88] = MODEL_BDY_I_XX;
  VL[89] = MODEL_BDY_I_YY;
  VL[90] = MODEL_BDY_I_ZZ;

  VL[91] = m_BDY.m_Pos_X;
  VL[92] = m_BDY.m_Pos_Y;
  VL[93] = m_BDY.m_Pos_Z;
  VL[94] = m_BDY.m_Vel_X;
  VL[95] = m_BDY.m_Vel_Y;
  VL[96] = m_BDY.m_Vel_Z;
  VL[97] = m_BDY.m_Pos_Quat1;
  VL[98] = m_BDY.m_Pos_Quat2;
  VL[99] = m_BDY.m_Pos_Quat3;
  VL[100] = m_BDY.m_Pos_Quat4;
  VL[101] = m_BDY.m_Vel_Quat1;
  VL[102] = m_BDY.m_Vel_Quat2;
  VL[103] = m_BDY.m_Vel_Quat3;
  VL[104] = m_BDY.m_Vel_Quat4;
  VL[105] = m_BDY.m_ExtF_X;
  VL[106] = m_BDY.m_ExtF_Y;
  VL[107] = m_BDY.m_ExtF_Z;
  VL[108] = m_BDY.m_ExtM_X;
  VL[109] = m_BDY.m_ExtM_Y;
  VL[110] = m_BDY.m_ExtM_Z;

  VL[111] = VL[12] * VL[4] + VL[11] * VL[6] + VL[1];
  VL[112] = VL[5] + VL[2];
  VL[113] = -VL[11] * VL[4] + VL[12] * VL[6] + VL[3];

  VL[114] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[111]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[112]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[113] + VL[91];
  VL[115] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[111]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[112]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[113] + VL[92];
  VL[116] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[111]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[112]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[113] + VL[93];

  VL[117] = VL[32] * VL[24] + VL[31] * VL[26] + VL[21];
  VL[118] = VL[25] + VL[22];
  VL[119] = -VL[31] * VL[24] + VL[32] * VL[26] + VL[23];

  VL[120] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[117]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[118]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[119] + VL[91];
  VL[121] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[117]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[118]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[119] + VL[92];
  VL[122] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[117]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[118]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[119] + VL[93];

  VL[123] = VL[52] * VL[44] + VL[51] * VL[46] + VL[41];
  VL[124] = VL[45] + VL[42];
  VL[125] = -VL[51] * VL[44] + VL[52] * VL[46] + VL[43];

  VL[126] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[123]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[124]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[125] + VL[91];
  VL[127] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[123]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[124]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[125] + VL[92];
  VL[128] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[123]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[124]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[125] + VL[93];

  VL[129] = VL[72] * VL[64] + VL[71] * VL[66] + VL[61];
  VL[130] = VL[65] + VL[62];
  VL[131] = -VL[71] * VL[64] + VL[72] * VL[66] + VL[63];

  VL[132] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[129]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[130]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[131] + VL[91];
  VL[133] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[129]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[130]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[131] + VL[92];
  VL[134] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[129]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[130]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[131] + VL[93];

  VL[135] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[84]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[85]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[86] + VL[91];
  VL[136] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[84]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[85]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[86] + VL[92];
  VL[137] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[84]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[85]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[86] + VL[93];

  VL[138] = -VL[11] * VL[13] * VL[4] + VL[12] * 0 + VL[12] * VL[13] * VL[6] + VL[11] * 0 + 0;
  VL[139] = 0 + 0;
  VL[140] = -VL[12] * VL[13] * VL[4] - VL[11] * 0 - VL[11] * VL[13] * VL[6] + VL[12] * 0 + 0;

  VL[141] =
    (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[138] + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[139]
    + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[140] - (4 * VL[99] * VL[103] + 4 * VL[100] * VL[104]) * VL[111]
    + (2 * VL[102] * VL[99] + 2 * VL[98] * VL[103] - 2 * VL[101] * VL[100] - 2 * VL[97] * VL[104]) * VL[112]
    + (2 * VL[102] * VL[100] + 2 * VL[98] * VL[104] + 2 * VL[101] * VL[99] + 2 * VL[97] * VL[103]) * VL[113] + VL[94];
  VL[142] =
    (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[138] + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[139]
    + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[140]
    + (2 * VL[102] * VL[99] + 2 * VL[98] * VL[103] + 2 * VL[101] * VL[100] + 2 * VL[97] * VL[104]) * VL[111]
    - (4 * VL[98] * VL[102] + 4 * VL[100] * VL[104]) * VL[112]
    + (2 * VL[103] * VL[100] + 2 * VL[99] * VL[104] - 2 * VL[101] * VL[98] - 2 * VL[97] * VL[102]) * VL[113] + VL[95];
  VL[143] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[138]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[139]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[140]
            + (2 * VL[102] * VL[100] + 2 * VL[98] * VL[104] - 2 * VL[101] * VL[99] - 2 * VL[97] * VL[103]) * VL[111]
            + (2 * VL[103] * VL[100] + 2 * VL[99] * VL[104] + 2 * VL[101] * VL[98] + 2 * VL[97] * VL[102]) * VL[112]
            - (4 * VL[98] * VL[102] + 4 * VL[99] * VL[103]) * VL[113] + VL[96];

  VL[144] = -VL[31] * VL[33] * VL[24] + VL[32] * 0 + VL[32] * VL[33] * VL[26] + VL[31] * 0 + 0;
  VL[145] = 0 + 0;
  VL[146] = -VL[32] * VL[33] * VL[24] - VL[31] * 0 - VL[31] * VL[33] * VL[26] + VL[32] * 0 + 0;

  VL[147] =
    (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[144] + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[145]
    + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[146] - (4 * VL[99] * VL[103] + 4 * VL[100] * VL[104]) * VL[117]
    + (2 * VL[102] * VL[99] + 2 * VL[98] * VL[103] - 2 * VL[101] * VL[100] - 2 * VL[97] * VL[104]) * VL[118]
    + (2 * VL[102] * VL[100] + 2 * VL[98] * VL[104] + 2 * VL[101] * VL[99] + 2 * VL[97] * VL[103]) * VL[119] + VL[94];
  VL[148] =
    (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[144] + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[145]
    + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[146]
    + (2 * VL[102] * VL[99] + 2 * VL[98] * VL[103] + 2 * VL[101] * VL[100] + 2 * VL[97] * VL[104]) * VL[117]
    - (4 * VL[98] * VL[102] + 4 * VL[100] * VL[104]) * VL[118]
    + (2 * VL[103] * VL[100] + 2 * VL[99] * VL[104] - 2 * VL[101] * VL[98] - 2 * VL[97] * VL[102]) * VL[119] + VL[95];
  VL[149] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[144]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[145]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[146]
            + (2 * VL[102] * VL[100] + 2 * VL[98] * VL[104] - 2 * VL[101] * VL[99] - 2 * VL[97] * VL[103]) * VL[117]
            + (2 * VL[103] * VL[100] + 2 * VL[99] * VL[104] + 2 * VL[101] * VL[98] + 2 * VL[97] * VL[102]) * VL[118]
            - (4 * VL[98] * VL[102] + 4 * VL[99] * VL[103]) * VL[119] + VL[96];

  VL[150] = -VL[51] * VL[53] * VL[44] + VL[52] * 0 + VL[52] * VL[53] * VL[46] + VL[51] * 0 + 0;
  VL[151] = 0 + 0;
  VL[152] = -VL[52] * VL[53] * VL[44] - VL[51] * 0 - VL[51] * VL[53] * VL[46] + VL[52] * 0 + 0;

  VL[153] =
    (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[150] + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[151]
    + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[152] - (4 * VL[99] * VL[103] + 4 * VL[100] * VL[104]) * VL[123]
    + (2 * VL[102] * VL[99] + 2 * VL[98] * VL[103] - 2 * VL[101] * VL[100] - 2 * VL[97] * VL[104]) * VL[124]
    + (2 * VL[102] * VL[100] + 2 * VL[98] * VL[104] + 2 * VL[101] * VL[99] + 2 * VL[97] * VL[103]) * VL[125] + VL[94];
  VL[154] =
    (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[150] + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[151]
    + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[152]
    + (2 * VL[102] * VL[99] + 2 * VL[98] * VL[103] + 2 * VL[101] * VL[100] + 2 * VL[97] * VL[104]) * VL[123]
    - (4 * VL[98] * VL[102] + 4 * VL[100] * VL[104]) * VL[124]
    + (2 * VL[103] * VL[100] + 2 * VL[99] * VL[104] - 2 * VL[101] * VL[98] - 2 * VL[97] * VL[102]) * VL[125] + VL[95];
  VL[155] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[150]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[151]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[152]
            + (2 * VL[102] * VL[100] + 2 * VL[98] * VL[104] - 2 * VL[101] * VL[99] - 2 * VL[97] * VL[103]) * VL[123]
            + (2 * VL[103] * VL[100] + 2 * VL[99] * VL[104] + 2 * VL[101] * VL[98] + 2 * VL[97] * VL[102]) * VL[124]
            - (4 * VL[98] * VL[102] + 4 * VL[99] * VL[103]) * VL[125] + VL[96];

  VL[156] = -VL[71] * VL[73] * VL[64] + VL[72] * 0 + VL[72] * VL[73] * VL[66] + VL[71] * 0 + 0;
  VL[157] = 0 + 0;
  VL[158] = -VL[72] * VL[73] * VL[64] - VL[71] * 0 - VL[71] * VL[73] * VL[66] + VL[72] * 0 + 0;

  VL[159] =
    (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[156] + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[157]
    + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[158] - (4 * VL[99] * VL[103] + 4 * VL[100] * VL[104]) * VL[129]
    + (2 * VL[102] * VL[99] + 2 * VL[98] * VL[103] - 2 * VL[101] * VL[100] - 2 * VL[97] * VL[104]) * VL[130]
    + (2 * VL[102] * VL[100] + 2 * VL[98] * VL[104] + 2 * VL[101] * VL[99] + 2 * VL[97] * VL[103]) * VL[131] + VL[94];
  VL[160] =
    (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[156] + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[157]
    + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[158]
    + (2 * VL[102] * VL[99] + 2 * VL[98] * VL[103] + 2 * VL[101] * VL[100] + 2 * VL[97] * VL[104]) * VL[129]
    - (4 * VL[98] * VL[102] + 4 * VL[100] * VL[104]) * VL[130]
    + (2 * VL[103] * VL[100] + 2 * VL[99] * VL[104] - 2 * VL[101] * VL[98] - 2 * VL[97] * VL[102]) * VL[131] + VL[95];
  VL[161] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[156]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[157]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[158]
            + (2 * VL[102] * VL[100] + 2 * VL[98] * VL[104] - 2 * VL[101] * VL[99] - 2 * VL[97] * VL[103]) * VL[129]
            + (2 * VL[103] * VL[100] + 2 * VL[99] * VL[104] + 2 * VL[101] * VL[98] + 2 * VL[97] * VL[102]) * VL[130]
            - (4 * VL[98] * VL[102] + 4 * VL[99] * VL[103]) * VL[131] + VL[96];

  VL[162] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * 0 + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * 0
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * 0 - (4 * VL[99] * VL[103] + 4 * VL[100] * VL[104]) * VL[84]
            + (2 * VL[102] * VL[99] + 2 * VL[98] * VL[103] - 2 * VL[101] * VL[100] - 2 * VL[97] * VL[104]) * VL[85]
            + (2 * VL[102] * VL[100] + 2 * VL[98] * VL[104] + 2 * VL[101] * VL[99] + 2 * VL[97] * VL[103]) * VL[86]
            + VL[94];
  VL[163] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * 0 + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * 0
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * 0
            + (2 * VL[102] * VL[99] + 2 * VL[98] * VL[103] + 2 * VL[101] * VL[100] + 2 * VL[97] * VL[104]) * VL[84]
            - (4 * VL[98] * VL[102] + 4 * VL[100] * VL[104]) * VL[85]
            + (2 * VL[103] * VL[100] + 2 * VL[99] * VL[104] - 2 * VL[101] * VL[98] - 2 * VL[97] * VL[102]) * VL[86]
            + VL[95];
  VL[164] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * 0 + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * 0
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * 0
            + (2 * VL[102] * VL[100] + 2 * VL[98] * VL[104] - 2 * VL[101] * VL[99] - 2 * VL[97] * VL[103]) * VL[84]
            + (2 * VL[103] * VL[100] + 2 * VL[99] * VL[104] + 2 * VL[101] * VL[98] + 2 * VL[97] * VL[102]) * VL[85]
            - (4 * VL[98] * VL[102] + 4 * VL[99] * VL[103]) * VL[86] + VL[96];

  VL[165] = VL[12] * 1 + VL[11] * 0;
  VL[166] = VL[12] * 0 + VL[11] * 0;
  VL[167] = VL[12] * 0 + VL[11] * 1;
  VL[168] = 0;
  VL[169] = 1;
  VL[170] = 0;
  VL[171] = -VL[11] * 1 + VL[12] * 0;
  VL[172] = -VL[11] * 0 + VL[12] * 0;
  VL[173] = -VL[11] * 0 + VL[12] * 1;

  VL[174] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[165]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[168]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[171];
  VL[175] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[166]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[169]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[172];
  VL[176] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[167]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[170]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[173];
  VL[177] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[165]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[168]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[171];
  VL[178] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[166]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[169]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[172];
  VL[179] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[167]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[170]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[173];
  VL[180] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[165]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[168]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[171];
  VL[181] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[166]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[169]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[172];
  VL[182] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[167]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[170]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[173];

  VL[183] = VL[32] * 1 + VL[31] * 0;
  VL[184] = VL[32] * 0 + VL[31] * 0;
  VL[185] = VL[32] * 0 + VL[31] * 1;
  VL[186] = 0;
  VL[187] = 1;
  VL[188] = 0;
  VL[189] = -VL[31] * 1 + VL[32] * 0;
  VL[190] = -VL[31] * 0 + VL[32] * 0;
  VL[191] = -VL[31] * 0 + VL[32] * 1;

  VL[192] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[183]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[186]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[189];
  VL[193] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[184]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[187]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[190];
  VL[194] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[185]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[188]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[191];
  VL[195] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[183]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[186]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[189];
  VL[196] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[184]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[187]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[190];
  VL[197] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[185]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[188]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[191];
  VL[198] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[183]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[186]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[189];
  VL[199] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[184]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[187]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[190];
  VL[200] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[185]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[188]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[191];

  VL[201] = VL[52] * 1 + VL[51] * 0;
  VL[202] = VL[52] * 0 + VL[51] * 0;
  VL[203] = VL[52] * 0 + VL[51] * 1;
  VL[204] = 0;
  VL[205] = 1;
  VL[206] = 0;
  VL[207] = -VL[51] * 1 + VL[52] * 0;
  VL[208] = -VL[51] * 0 + VL[52] * 0;
  VL[209] = -VL[51] * 0 + VL[52] * 1;

  VL[210] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[201]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[204]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[207];
  VL[211] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[202]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[205]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[208];
  VL[212] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[203]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[206]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[209];
  VL[213] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[201]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[204]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[207];
  VL[214] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[202]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[205]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[208];
  VL[215] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[203]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[206]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[209];
  VL[216] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[201]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[204]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[207];
  VL[217] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[202]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[205]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[208];
  VL[218] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[203]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[206]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[209];

  VL[219] = VL[72] * 1 + VL[71] * 0;
  VL[220] = VL[72] * 0 + VL[71] * 0;
  VL[221] = VL[72] * 0 + VL[71] * 1;
  VL[222] = 0;
  VL[223] = 1;
  VL[224] = 0;
  VL[225] = -VL[71] * 1 + VL[72] * 0;
  VL[226] = -VL[71] * 0 + VL[72] * 0;
  VL[227] = -VL[71] * 0 + VL[72] * 1;

  VL[228] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[219]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[222]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[225];
  VL[229] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[220]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[223]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[226];
  VL[230] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[221]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[224]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[227];
  VL[231] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[219]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[222]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[225];
  VL[232] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[220]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[223]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[226];
  VL[233] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[221]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[224]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[227];
  VL[234] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[219]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[222]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[225];
  VL[235] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[220]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[223]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[226];
  VL[236] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[221]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[224]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[227];

  VL[237] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * 1 + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * 0
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * 0;
  VL[238] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * 0 + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * 1
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * 0;
  VL[239] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * 0 + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * 0
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * 1;
  VL[240] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * 1 + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * 0
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * 0;
  VL[241] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * 0 + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * 1
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * 0;
  VL[242] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * 0 + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * 0
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * 1;
  VL[243] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * 1 + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * 0
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * 0;
  VL[244] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * 0 + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * 1
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * 0;
  VL[245] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * 0 + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * 0
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * 1;

  VL[246] = VL[12] * 1 + VL[11] * 0;
  VL[247] = 0;
  VL[248] = -VL[11] * 1 + VL[12] * 0;
  VL[249] = VL[12] * 0 + VL[11] * 0;
  VL[250] = 1;
  VL[251] = -VL[11] * 0 + VL[12] * 0;
  VL[252] = VL[12] * 0 + VL[11] * 1;
  VL[253] = 0;
  VL[254] = -VL[11] * 0 + VL[12] * 1;

  VL[255] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[246]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[247]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[248];
  VL[256] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[246]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[247]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[248];
  VL[257] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[246]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[247]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[248];
  VL[258] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[249]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[250]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[251];
  VL[259] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[249]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[250]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[251];
  VL[260] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[249]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[250]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[251];
  VL[261] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[252]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[253]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[254];
  VL[262] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[252]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[253]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[254];
  VL[263] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[252]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[253]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[254];

  VL[264] = VL[32] * 1 + VL[31] * 0;
  VL[265] = 0;
  VL[266] = -VL[31] * 1 + VL[32] * 0;
  VL[267] = VL[32] * 0 + VL[31] * 0;
  VL[268] = 1;
  VL[269] = -VL[31] * 0 + VL[32] * 0;
  VL[270] = VL[32] * 0 + VL[31] * 1;
  VL[271] = 0;
  VL[272] = -VL[31] * 0 + VL[32] * 1;

  VL[273] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[264]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[265]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[266];
  VL[274] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[264]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[265]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[266];
  VL[275] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[264]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[265]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[266];
  VL[276] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[267]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[268]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[269];
  VL[277] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[267]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[268]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[269];
  VL[278] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[267]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[268]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[269];
  VL[279] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[270]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[271]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[272];
  VL[280] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[270]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[271]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[272];
  VL[281] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[270]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[271]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[272];

  VL[282] = VL[52] * 1 + VL[51] * 0;
  VL[283] = 0;
  VL[284] = -VL[51] * 1 + VL[52] * 0;
  VL[285] = VL[52] * 0 + VL[51] * 0;
  VL[286] = 1;
  VL[287] = -VL[51] * 0 + VL[52] * 0;
  VL[288] = VL[52] * 0 + VL[51] * 1;
  VL[289] = 0;
  VL[290] = -VL[51] * 0 + VL[52] * 1;

  VL[291] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[282]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[283]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[284];
  VL[292] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[282]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[283]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[284];
  VL[293] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[282]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[283]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[284];
  VL[294] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[285]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[286]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[287];
  VL[295] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[285]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[286]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[287];
  VL[296] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[285]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[286]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[287];
  VL[297] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[288]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[289]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[290];
  VL[298] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[288]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[289]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[290];
  VL[299] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[288]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[289]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[290];

  VL[300] = VL[72] * 1 + VL[71] * 0;
  VL[301] = 0;
  VL[302] = -VL[71] * 1 + VL[72] * 0;
  VL[303] = VL[72] * 0 + VL[71] * 0;
  VL[304] = 1;
  VL[305] = -VL[71] * 0 + VL[72] * 0;
  VL[306] = VL[72] * 0 + VL[71] * 1;
  VL[307] = 0;
  VL[308] = -VL[71] * 0 + VL[72] * 1;

  VL[309] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[300]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[301]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[302];
  VL[310] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[300]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[301]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[302];
  VL[311] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[300]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[301]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[302];
  VL[312] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[303]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[304]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[305];
  VL[313] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[303]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[304]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[305];
  VL[314] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[303]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[304]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[305];
  VL[315] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * VL[306]
            + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * VL[307]
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * VL[308];
  VL[316] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * VL[306]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * VL[307]
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * VL[308];
  VL[317] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * VL[306]
            + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * VL[307]
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * VL[308];

  VL[318] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * 1 + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * 0
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * 0;
  VL[319] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * 1 + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * 0
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * 0;
  VL[320] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * 1 + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * 0
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * 0;
  VL[321] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * 0 + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * 1
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * 0;
  VL[322] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * 0 + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * 1
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * 0;
  VL[323] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * 0 + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * 1
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * 0;
  VL[324] = (1 - 2 * pow(VL[99], 2) - 2 * pow(VL[100], 2)) * 0 + (2 * VL[98] * VL[99] - 2 * VL[97] * VL[100]) * 0
            + (2 * VL[98] * VL[100] + 2 * VL[97] * VL[99]) * 1;
  VL[325] = (2 * VL[98] * VL[99] + 2 * VL[97] * VL[100]) * 0 + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[100], 2)) * 0
            + (2 * VL[99] * VL[100] - 2 * VL[97] * VL[98]) * 1;
  VL[326] = (2 * VL[98] * VL[100] - 2 * VL[97] * VL[99]) * 0 + (2 * VL[99] * VL[100] + 2 * VL[97] * VL[98]) * 0
            + (1 - 2 * pow(VL[98], 2) - 2 * pow(VL[99], 2)) * 1;

  // Parsed motion equations.

  kMath::kMatrix equations(11, 12);

  calcAccelQuatStg1(equations, VL);

  equations.rref();
  if (MODEL_EQN_DISPLAY_FLAG)
  {
    equations.clean(12);
    equations.display();
  }

  m_RFT.m_Joint_Accel = -equations(0, 11);
  m_LFT.m_Joint_Accel = -equations(1, 11);
  m_RRT.m_Joint_Accel = -equations(2, 11);
  m_LRT.m_Joint_Accel = -equations(3, 11);
  m_BDY.m_Accel_X = -equations(4, 11);
  m_BDY.m_Accel_Y = -equations(5, 11);
  m_BDY.m_Accel_Z = -equations(6, 11);
  m_BDY.m_Accel_Quat1 = -equations(7, 11);
  m_BDY.m_Accel_Quat2 = -equations(8, 11);
  m_BDY.m_Accel_Quat3 = -equations(9, 11);
  m_BDY.m_Accel_Quat4 = -equations(10, 11);
}
